rule Model2Schema 
	transform s : UML!Model
	to t : LQN!LqnModelType
	{
		t.name = s.name;
		t.processor ::= UML!Device.all();
	}
	
rule Device2Processor
	transform s: UML!Device
	to t: LQN!ProcessorType
	{
		// All the "deployment" relationships of s
		var deps = s.getDependencies();
		t.name = s.name;
		t.task ::= deps;
	}
	
rule TaskDeployment
	transform s: UML!Deployment
	to t: LQN!TaskType
	{
	 	// Artifact related to the asssociation "deployment"
		var artif = s.deployedArtifacts.first;
		// Assumption: Each artifact represents a component
		var cmpnt = artif.manifestation.collect(i | i.supplier).flatten.first;
		//An Artifact is transformed to a Task
		t.name = s.name + '-' + artif.name;
		t.entry ::= cmpnt.getLifelines();		
	}
	
rule Lifeline2Entry
	transform s: UML!Lifeline
	to t: LQN!EntryType
	{
		t.name = s.name;
	} 	
	
	
// It returns all the dependencies having the "self" UML!Node as a client.
operation  UML!NamedElement getDependencies(): Sequence
{	
	return UML!Dependency.all.select(i|i.client.includes(self));
} 

operation UML!Component getLifelines(): Any
{	
	var lifelns = UML!Lifeline.all.select(i | i.represents.type == self);
	return lifelns;
}