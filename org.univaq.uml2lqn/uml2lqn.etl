rule Model2Schema 
	transform s : UML!Model
	to t : LQN!LqnModelType
	{
		t.name = s.name;
		t.processor ::= UML!Device.all();
	}
	
rule Device2Processor
	transform s: UML!Device
	to t: LQN!ProcessorType
	{
		// All the "deployment" relationships of s
		var deps = s.getDependencies();
		t.name = s.name;
		t.task ::= deps;
	}
	
rule TaskDeployment
	transform s: UML!Deployment
	to t: LQN!TaskType
	{
		var emfTool : new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
		//The Artifact related to the asssociation "deployment"
		var artif = s.deployedArtifacts.first;
		
		// Artifact Manifestations (i.e., Interactions)
		var intercts = artif.getManifestations();
		var interctsMembers = intercts.collect(i | i.ownedMembers).flatten;
		var lifelns = interctsMembers.select(i | i.isTypeOf(UML!Lifeline));
		
		//An Artifact is transformed to a Task
		t.name = artif.name + s.name;
		t.entry ::= lifelns;	
	}
	
rule Lifeline2Entry
	transform s: UML!Lifeline
	to t: LQN!EntryType
	{
		t.name = s.name;
	} 
	
// It returns all the dependencies having the "self" UML!Node as a client.
operation  UML!NamedElement getDependencies(): Sequence
{	
	return UML!Dependency.all.select(i|i.client.includes(self));
} 

// It returns the element represented by an Artifact in the Deployment View
operation UML!Artifact getManifestations(): Sequence
{
	// All the manifestations of the artifact self
	var manifs = self.getDependencies();
	// Manifestation suppliers 
	return manifs.collect(i | i.supplier).flatten();
}


