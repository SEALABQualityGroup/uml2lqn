rule Model2Schema 
	transform s : UML!Model
	to t : LQN!LqnModelType
	{
		t.name = s.name;
		t.processor ::= UML!Device.all();
	}
	
rule Device2Processor
	transform s: UML!Device
	to t: LQN!ProcessorType
	{
		// All the "deployment" relationships of s
		t.name = s.name;
		t.task ::= s.deployment.collect(i | i.supplier).flatten;
	}
	
rule Artifact2Task
	transform s: UML!Artifact
	to t: LQN!TaskType
	{
		// Get the component associated to the artifact		
		var cmpnt = s.manifestation.supplier.flatten.first;

		t.name = s.name;
		t.entry ::= cmpnt.getLifelines();
	}
	
rule Lifeline2Entry
	transform s: UML!Lifeline
	to t: LQN!EntryType
	{
		var ownedMessages = s.getMessages().select(i | i.covered.includes(s));
		t.name = s.name;
		t.entryPhaseActivities = new LQN!PhaseActivities;
		t.entryPhaseActivities.activity ::= ownedMessages;		
	} 
	
rule Operation2Activity
	transform s: UML!MessageOccurrenceSpecification
	to t: LQN!ActivityPhasesType
	{
		t.name = s.name;
	}
	
// Given a Lifeline, it returns all the messages included to the related Interaction
operation UML!Lifeline getMessages(): Any
{	
	var interaction = self.namespace;
	return interaction.ownedMember.select(i | i.isTypeOf(UML!MessageOccurrenceSpecification));
}

operation UML!Component getLifelines(): Sequence
{	
	var lifelns = UML!Lifeline.all.select(i | i.represents.type == self);
	return lifelns;
}