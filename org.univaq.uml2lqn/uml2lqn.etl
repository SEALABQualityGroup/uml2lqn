rule Model2Schema 
	transform s : UML!Model
	to t : LQN!LqnModelType
	{
		t.name = s.name;
		t.processor ::= UML!Node.all();
	}
	
rule Node2Processor
	transform s : UML!Node
	to t: LQN!ProcessorType 
	{		
		// Apply the transformation only if a Node has at least a deployed artifact
		guard : (not s.deployment.isEmpty) and s.checkStereotype("GaExecHost")

		// Get the associated artifact for each deployment of the Node
		var artifs = s.deployments.collect(i | i.deployedArtifact.first).flatten;
		// Get the object representing the "GaExecHost" stereotype
		var strtypeObj = s.getAppliedStereotypes().selectOne(i | i.name == "GaExecHost");	

		// Stereotype tags 
		var resMult = s.getValue(strtypeObj, "resMult");
		var speedFactor = s.getValue(strtypeObj, "speedFactor");
		var schedulingType = s.getValue(strtypeObj, "otherSchedPolicy");
		
		// The replication attribute has type "BigInteger". This statement performs a cast. 
		var castMul = new Native("java.math.BigInteger")(resMult);
		
		t.name = s.name;
		t.task ::= artifs;
		t.replication = castMul;
	}
	
rule Artifact2Task
	transform s: UML!Artifact
	to t: LQN!TaskType
	{	
		// Each Artifact has a single manifestation
		guard : s.manifestation.size() == 1
		
		var manif = s.manifestation.first;
		var cmpnt = manif.supplier.first;
		
		var lifelines = cmpnt.getLifelines();
		var entries = lifelines.collect(i | i.getCalls()).flatten;

		t.name = cmpnt.name;
		t.entry ::= entries;
	}
	
rule MsgSpec2Entry
	transform msgSpec: UML!MessageOccurrenceSpecification
	to entry: LQN!EntryType
	{	
		var relatedMessage = msgSpec.message;
		var msgSort = relatedMessage.messageSort;
		
		var activitySeq = new Sequence();
		var callSeq = new Sequence();
		var activity = new LQN!ActivityPhasesType;
		var call = new LQN!ActivityMakingCallType;
		
		var clientName = "client_" + relatedMessage.name;
		var serverName = "server_" + relatedMessage.name;
		
		callSeq.add(call);
		
		
		
		entry.name = relatedMessage.name;		
		entry.type = LQN!TypeType#PH1PH2;			
		entry.entryPhaseActivities = new LQN!PhaseActivities;	
		
		
		// The Message Specification is the sender
		if(relatedMessage.sendEvent == msgSpec)
		{
			activity.name = clientName;
			
			// Set the characteristics of the Activity
			switch(msgSort)
			{	
				case UML!MessageSort#synchCall :
					activity.synchCall = callSeq;
					activity.synchCall.first.dest = serverName;
													
				case UML!MessageSort#asynchCall :
					activity.asynchCall = callSeq;
					activity.asynchCall.first.dest = serverName;
			}
		}	
		
		if(relatedMessage.receiveEvent == msgSpec)
		{
			activity.name = serverName;
		}
			
		activitySeq.add(activity);
		entry.entryPhaseActivities.activity = activitySeq;
					
	}
		
operation UML!Component getLifelines(): Sequence
{
	// All the lifelines of the Model
	var lifelns = UML!Lifeline.all();
	// Get all the lifelines involving "element"
	return lifelns.select(i | i.represents.type == self);
} 

/* 
 * Given a Lifeline it returns all the messages sent and received by the lifeline;
 * The message should have a well-defined signature
 * return: a set of UML!MessageOccurrenceSpecification
 */
operation UML!Lifeline getCalls(): Set
{
	// Collects all the MessageOccurrenceSpecification of a Lifeline
	var messages = self.coveredBy.
					select(i | i.isTypeOf(UML!MessageOccurrenceSpecification));
	// It takes only messages having a well-defined signature
	return messages.select(i | i.message.signature.isDefined());	
}	
	 
operation UML!NamedElement checkStereotype(stereotypeName : String) : Boolean
{
	return self.getAppliedStereotypes().exists(i|i.name = stereotypeName);
}		